<?php

/**
 * LRCODE
 * ============================================================================
 * 版权所有 2016-2030 江苏蓝儒网络科技有限公司，并保留所有权利。
 * 网站地址: http://www.lanru.cn
 * ----------------------------------------------------------------------------
 * 这不是一个自由软件！您只能在不用于商业目的的前提下对程序代码进行修改和使用 .
 * 不允许对程序代码以任何形式任何目的的再发布。
 * ============================================================================
 * Author: 潇声
 * Date: 2019-12
 */

namespace app\admin\controller\auth;

use app\admin\model\AdminGroup;
use app\admin\model\AdminGroupAccess;
use app\admin\model\AdminRule;
use app\common\controller\Backend;
use lanru\Random;
use lanru\Tree;
use think\Db;
use think\Exception;
use think\facade\Validate;

class Admin extends Backend
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->model = new \app\admin\model\Admin();

        $this->childrenAdminIds = $this->auth->getChildrenAdminIds(true);
        $this->childrenGroupIds = $this->auth->getChildrenGroupIds(true);

        $groupList = collection(AdminGroup::where('id', 'in', $this->childrenGroupIds)->select())->toArray();

        Tree::instance()->init($groupList);
        $groupdata = [];
        if ($this->auth->isSuperAdmin()) {
            $result = Tree::instance()->getTreeList(Tree::instance()->getTreeArray(0));
            foreach ($result as $k => $v) {
                $groupdata[$v['id']] = $v['name'];
            }
        } else {
            $result = [];
            $groups = $this->auth->getGroups();
            foreach ($groups as $m => $n) {
                $childlist = Tree::instance()->getTreeList(Tree::instance()->getTreeArray($n['id']));
                $temp = [];
                foreach ($childlist as $k => $v) {
                    $temp[$v['id']] = $v['name'];
                }
                $result[__($n['name'])] = $temp;
            }
            $groupdata = $result;
        }

        $this->assign('groupdata', $groupdata);
    }

    public function index()
    {

        $childrenGroupIds = $this->childrenGroupIds;
        $groupName = AdminGroup::where('id', 'in', $childrenGroupIds)
            ->column('id,name');
        $authGroupList = AdminGroupAccess::where('admin_group_id', 'in', $childrenGroupIds)
            ->field('admin_id,admin_group_id')
            ->select();

        $adminGroupName = [];
        foreach ($authGroupList as $k => $v) {
            if (isset($groupName[$v['admin_group_id']])) {
                $adminGroupName[$v['admin_id']][$v['admin_group_id']] = $groupName[$v['admin_group_id']];
            }
        }
        $groups = $this->auth->getGroups();
        foreach ($groups as $m => $n) {
            $adminGroupName[$this->auth->id][$n['id']] = $n['name'];
        }

        $total = $this->model->where('id', 'in', $this->childrenAdminIds)
            ->order('id', 'desc')
            ->count();

        $list = $this->model->where('id', 'in', $this->childrenAdminIds)
            ->order('id', 'desc')
            ->all();
        foreach ($list as $k => &$v) {
            $groups = isset($adminGroupName[$v['id']]) ? $adminGroupName[$v['id']] : [];
            $v['groups'] = implode(',', array_keys($groups));
            $v['groups_text'] = implode(',', array_values($groups));
        }
        unset($v);
        $this->assign('total', $total)->assign('data', $list);

        return $this->fetch();
    }

    public function add()
    {
        if ($this->request->isPost()) {
            $params = $this->request->post("row/a");
            if ($params) {
                if (!Validate::is($params['password'], '\S{6,16}')) {
                    $this->error('密码长度必须在6-16位之间，不能包含空格');
                }
                $params['salt'] = Random::alnum();
                $params['password'] = md5(md5($params['password']) . $params['salt']);

                try {

                    Db::transaction(function () use ($params) {

                        $name = str_replace("\\model\\", "\\validate\\", get_class($this->model));
                        $result = $this->validate($params, $name . '.add');
                        if(true !== $result){
                            throw new Exception($result);
                        }

                        $result = $this->model->save($params);
                        if ($result === false) {
                            throw new Exception($this->model->getError());
                        }
                        $group = $this->request->post("group/a");
                        //过滤不允许的组别,避免越权
                        $group = array_intersect($this->childrenGroupIds, $group);
                        $dataset = [];
                        foreach ($group as $value) {
                            $dataset[] = ['admin_id' => $this->model->id, 'admin_group_id' => $value];
                        }

                        (new AdminGroupAccess())->saveAll($dataset);

                    });

                }catch (Exception $e) {
                    return $this->error($e->getMessage());
                }

                return $this->success();

            }
            return $this->error();
        }

        return $this->fetch();
    }
    /**
     * 编辑
     */
    public function edit()
    {
        $row = $this->model->get($this->request->param('id', 0, 'intval'));
        if (!$row) {
            return $this->error('记录不存在!');
        }
        if (!in_array($row->id, $this->childrenAdminIds)) {
            return $this->error('无权限');
        }
        if ($this->request->isPost()) {
            $params = $this->request->post("row/a");
            if ($params) {
                if ($params['password']) {
                    if (!Validate::is($params['password'], '\S{6,16}')) {
                        return $this->error('密码长度必须在6-16位之间，不能包含空格');
                    }
                    $params['salt'] = Random::alnum();
                    $params['password'] = md5(md5($params['password']) . $params['salt']);
                } else {
                    unset($params['password'], $params['salt']);
                }

                try {

                    Db::transaction(function () use ($params, $row) {

                        $name = str_replace("\\model\\", "\\validate\\", get_class($this->model));
                        $result = $this->validate($params, $name . '.edit');
                        if(true !== $result){
                            throw new Exception($result);
                        }

                        $row->save($params);

                        // 先移除所有权限
                        AdminGroupAccess::where('admin_id', $row->id)->delete();

                        $group = $this->request->post("group/a");

                        // 过滤不允许的组别,避免越权
                        $group = array_intersect($this->childrenGroupIds, $group);

                        $dataset = [];
                        foreach ($group as $value) {
                            $dataset[] = ['admin_id' => $row->id, 'admin_group_id' => $value];
                        }
                        (new AdminGroupAccess())->saveAll($dataset);

                    });

                } catch (Exception $e) {
                    return $this->error($e->getMessage());
                }

                return $this->success();
            }
            return $this->error();
        }
        $grouplist = $this->auth->getGroups($row['id']);
        $groupids = [];
        foreach ($grouplist as $k => $v) {
            $groupids[] = $v['id'];
        }
        $this->assign("row", $row);
        $this->assign("groupids", $groupids);
        return $this->fetch();
    }

    public function del()
    {

        $ids = $this->request->param('id');
        if (stripos($ids, '~') !== false) $ids = explode("~", $ids);

        $ids = is_array($ids) ? $ids : [$ids];

        if ($ids) {
            $ids = array_intersect($this->childrenAdminIds, $ids);
            // 避免越权删除管理员
            $childrenGroupIds = $this->childrenGroupIds;
            $adminList = $this->model->where('id', 'in', $ids)->select();
            if ($adminList) {
                $deleteIds = [];
                foreach ($adminList as $k => $v) {
                    $deleteIds[] = $v->id;
                }
                $deleteIds = array_values(array_diff($deleteIds, [$this->auth->id]));
                if ($deleteIds) {
                    $this->model->destroy($deleteIds);
                    AdminGroupAccess::where('admin_id', 'in', $deleteIds)->delete();
                    return $this->success();
                }
            }
        }
        return $this->error('无权限...');
    }
}